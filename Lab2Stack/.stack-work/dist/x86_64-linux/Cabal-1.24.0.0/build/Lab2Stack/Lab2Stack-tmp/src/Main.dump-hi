
==================== FINAL INTERFACE ====================
2016-11-11 00:23:56.206985 UTC

interface main@main:Main 8001
  interface hash: ecff06ea0b25b22a664c966a8ccae13d
  ABI hash: 8b6d34065d4df1af93d13c4ed015bad5
  export-list hash: 643745b7e1feccd08c72e8f089d267d4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6f9b46074b8e07742d1390f2d38a30d1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.connLoop
  Main.createConnection
  Main.handleConn
  Main.main
  Main.parseMessage
module dependencies:
package dependencies: ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-LVnipygDrAR1FEMFhjxcQX
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ
                      process-1.4.2.0@process-1.4.2.0
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.0@unix-2.7.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Exception 8762ca621bc15a8c1e8e34c703aba1aa
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.IO.Exception 6616e78328d3d532254cd5e593c9c639
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.Exit 4df7be78e54bbe200276120bd44e7e2a
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 74f40911ccc642ef529205732bba4073
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.ByteString 5df469a3defc2172b49042eabe647e67
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types a21cb2ffc6eaad6f8e6da2810c802283
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative 031c88d485c50b485154c1052ead17f6
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split 46e8ab9554123893f27696c65d88e63d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split.Internals 91fdfee0190d7e76d57defeef91ab9d3
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
075536b3ce89cf563e21a106bd68ae9c
  $wconnLoop ::
    GHC.Prim.Int#
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,U><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [0] -}
5330320342fbf8e56362112faaf68dbe
  $whandleConn ::
    Network.Socket.Types.Socket
    -> GHC.Conc.Sync.ThreadId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U(U),U,A,A,A)><L,U(U)><S,U>,
     Inline: [0] -}
f0f0565455da7b021c5c9ba7f8c124ee
  connLoop :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(S(S)SLLS(S)),1*U(U(U),U,U,U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.connLoop1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e678d90337078e47b74baf9a52ff9b5a
  connLoop1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(S(S)SLLS(S)),1*U(U(U),U,U,U(U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ww6 { GHC.Int.I32# ww7 ->
                 case ww5 of ww8 { GHC.MVar.MVar ww9 ->
                 Main.$wconnLoop ww7 ww2 ww3 ww4 ww9 w1 } } }) -}
824d499c81150e1a739b9ed902a32d78
  createConnection ::
    GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createConnection1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
ac1060b5584bd868cd7de4aca3441a89
  createConnection1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (p :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Network.Socket.Types.Socket #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                     case Network.Socket.$wbind
                            ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            (Network.Socket.Types.SockAddrInet
                               (case Text.Read.readEither6
                                       @ Network.Socket.Types.PortNumber
                                       (Text.ParserCombinators.ReadP.run
                                          @ Network.Socket.Types.PortNumber
                                          Main.createConnection5
                                          (case p of ww11 { GHC.Types.I# ww12 ->
                                           case GHC.Show.$wshowSignedInt
                                                  0#
                                                  ww12
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww13 { (#,#) ww14 ww15 ->
                                           GHC.Types.: @ GHC.Types.Char ww14 ww15 } })) of wild1 {
                                  [] -> Main.createConnection4
                                  : x ds12
                                  -> case ds12 of wild3 {
                                       [] -> x : ipv8 ipv9 -> Main.createConnection3 } })
                               Network.Socket.iNADDR_ANY)
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case Network.Socket.$wlisten
                            ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            Main.createConnection2
                            ipv8 of ds13 { (#,#) ipv10 ipv11 ->
                     (# ipv10, ww #) } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
410d18c23331e08e9e66101587833774
  createConnection2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
47cf371c269f80406ab27ee50f307d0c
  createConnection3 :: Network.Socket.Types.PortNumber
  {- Strictness: x -}
76744def86615e6b540d12e7fecc5da4
  createConnection4 :: Network.Socket.Types.PortNumber
  {- Strictness: x -}
132530ee5bb8decc39887011f5ce29c6
  createConnection5 ::
    Text.ParserCombinators.ReadP.P Network.Socket.Types.PortNumber
  {- Unfolding: ((Network.Socket.Types.$fReadPortNumber3
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <Network.Socket.Types.PortNumber>_R)
                   @ Network.Socket.Types.PortNumber
                   (Text.Read.readEither5 @ Network.Socket.Types.PortNumber)) -}
d1b73c7c8ffa5ce155a386032a4f408a
  handleConn ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> GHC.Conc.Sync.ThreadId -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S,1*U(U(U(U),U,A,A,A),A)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleConn1
                  `cast`
                (<(Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)>_R
                 ->_R <GHC.Conc.Sync.ThreadId>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7c0110ad4632d204d3362121ad8282ae
  handleConn1 ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> GHC.Conc.Sync.ThreadId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U(U(U(U),U,A,A,A),A)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (Network.Socket.Types.Socket,
                          Network.Socket.Types.SockAddr))
                   (w1 :: GHC.Conc.Sync.ThreadId)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 -> Main.$whandleConn ww1 w1 w2 }) -}
52ab89e9fc22fad25faa947d837e6f0f
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
aa402597fdf36d567bb8c2a82a2be987
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ ()
                        Main.main3
                        ipv
                   : port ds
                   -> case Main.createConnection1
                             (case Text.Read.readEither6
                                     @ GHC.Types.Int
                                     (Text.ParserCombinators.ReadP.run
                                        @ GHC.Types.Int
                                        Main.main2
                                        port) of wild1 {
                                []
                                -> GHC.Err.error
                                     @ 'GHC.Types.PtrRepLifted
                                     @ GHC.Types.Int
                                     GHC.Err.errorWithoutStackTrace_wild1
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     Text.Read.readEither4
                                : x ds2
                                -> case ds2 of wild2 {
                                     [] -> x
                                     : ipv2 ipv3
                                     -> GHC.Err.error
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.Types.Int
                                          GHC.Err.errorWithoutStackTrace_wild1
                                            `cast`
                                          (Sym (GHC.Classes.N:IP[0]
                                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                          Text.Read.readEither2 } })
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      Main.connLoop1 ipv3 ipv2 } } }) -}
c356bd6676f7c263267afb1e9ca53b75
  main2 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
783e23f0be37a8e24134b52685ac4816
  main3 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Main.main4) -}
7c859ff1cf98e7793589a9575a6efad2
  main4 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main5
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
b10a1e141e5f4290008b660ad11590ce
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at src/Main.hs:14:5-10"#) -}
acdc1956da2c90dfbae3809528000c4e
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
1d871f198e18b847280edf9006b436ad
  parseMessage ::
    Network.Socket.Types.Socket
    -> GHC.Conc.Sync.ThreadId -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),1*U,A,A,A)><L,1*U(U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.parseMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Conc.Sync.ThreadId>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fefc97ac1f4da8f5d3b0f332ee0b9b40
  parseMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.Conc.Sync.ThreadId
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),1*U,A,A,A)><L,1*U(U)><S,1*U><S,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

