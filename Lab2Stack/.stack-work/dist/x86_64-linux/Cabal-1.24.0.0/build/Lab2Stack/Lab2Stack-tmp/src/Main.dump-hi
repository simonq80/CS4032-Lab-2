
==================== FINAL INTERFACE ====================
2016-11-09 16:19:32.660024 UTC

interface main@main:Main 8001
  interface hash: 729626a44e197b7c5d12a0d47bbefaa5
  ABI hash: c4c7cfd2362add98cafbf33bcb544e71
  export-list hash: 25e7b0ac1d2fd6ada22483fd99979fc6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6f9b46074b8e07742d1390f2d38a30d1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.connLoop
  Main.createConnection
  Main.handleConn
  Main.main
  Main.parseMessage
module dependencies:
package dependencies: ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-LVnipygDrAR1FEMFhjxcQX
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ
                      process-1.4.2.0@process-1.4.2.0
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.0@unix-2.7.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 74f40911ccc642ef529205732bba4073
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types a21cb2ffc6eaad6f8e6da2810c802283
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative 031c88d485c50b485154c1052ead17f6
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ba0d482d5bc1f6ebf9e8a3c5b934f749
  $whandleConn ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U(U),A,A,A,U(U))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Network.Socket.Types.Socket)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.handleConn11
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ww of ww1 { Network.Socket.Types.MkSocket ww2 ww3 ww4 ww5 ww6 ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        2048#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv5
                 } in
                 let {
                   ptr1 :: GHC.Ptr.Ptr GHC.Word.Word8 {- Strictness: m -}
                   = GHC.Ptr.Ptr @ GHC.Word.Word8 ptr
                 } in
                 case Network.Socket.$wrecvBuf
                        ww2
                        ptr1
                        2048#
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Foreign.C.String.peekCStringLen1
                        (ptr1
                           `cast`
                         (GHC.Ptr.Ptr <GHC.Word.Word8, Foreign.C.Types.CChar>)_R,
                         ipv7)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepUnlifted
                        @ GHC.Prim.ByteArray#
                        ipv5
                        ipv8 of s4 { DEFAULT ->
                 Main.handleConn2 ww1 ipv9 s4 } } } } } } }) -}
a09b78c3d9e8b00275c712ca482e3aa6
  connLoop :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U(U),U,U,U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.connLoop1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
70b1d7f800a0557b5ac3b45ab2a98fc6
  connLoop1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U(U),U,U,U(U),U(U))><S,U> -}
824d499c81150e1a739b9ed902a32d78
  createConnection ::
    GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createConnection1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
ac1060b5584bd868cd7de4aca3441a89
  createConnection1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (p :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Network.Socket.Types.Socket #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                     case Network.Socket.$wbind
                            ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            (Network.Socket.Types.SockAddrInet
                               (case Text.Read.readEither6
                                       @ Network.Socket.Types.PortNumber
                                       (Text.ParserCombinators.ReadP.run
                                          @ Network.Socket.Types.PortNumber
                                          Main.createConnection5
                                          (case p of ww11 { GHC.Types.I# ww12 ->
                                           case GHC.Show.$wshowSignedInt
                                                  0#
                                                  ww12
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww13 { (#,#) ww14 ww15 ->
                                           GHC.Types.: @ GHC.Types.Char ww14 ww15 } })) of wild1 {
                                  [] -> Main.createConnection4
                                  : x ds12
                                  -> case ds12 of wild3 {
                                       [] -> x : ipv8 ipv9 -> Main.createConnection3 } })
                               Network.Socket.iNADDR_ANY)
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case Network.Socket.$wlisten
                            ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            Main.createConnection2
                            ipv8 of ds13 { (#,#) ipv10 ipv11 ->
                     (# ipv10, ww #) } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
410d18c23331e08e9e66101587833774
  createConnection2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
47cf371c269f80406ab27ee50f307d0c
  createConnection3 :: Network.Socket.Types.PortNumber
  {- Strictness: x -}
76744def86615e6b540d12e7fecc5da4
  createConnection4 :: Network.Socket.Types.PortNumber
  {- Strictness: x -}
132530ee5bb8decc39887011f5ce29c6
  createConnection5 ::
    Text.ParserCombinators.ReadP.P Network.Socket.Types.PortNumber
  {- Unfolding: ((Network.Socket.Types.$fReadPortNumber3
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <Network.Socket.Types.PortNumber>_R)
                   @ Network.Socket.Types.PortNumber
                   (Text.Read.readEither5 @ Network.Socket.Types.PortNumber)) -}
7ed2077244e1550227d0670fb46c0d56
  handleConn ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U(1*U(U(U),A,A,A,U(U)),A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleConn1
                  `cast`
                (<(Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a1890893dda731a071c153f74bddbede
  handleConn1 ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U(1*U(U(U),A,A,A,U(U)),A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Network.Socket.Types.Socket,
                          Network.Socket.Types.SockAddr))
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 -> Main.$whandleConn ww1 w1 }) -}
f35a1f4d3976b4c8a441820471801e74
  handleConn10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HELO text\n"#) -}
1196fc4d12c8b84302eaae01e9ffc8c8
  handleConn11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "handling conn"#) -}
2fb8c8172265bbfff43a1c0112bcd57a
  handleConn2 ::
    Network.Socket.Types.Socket
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U(U),A,A,A,1*U(U))><S,U><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (ds :: [GHC.Types.Char])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Base.eqString ds Main.handleConn10 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ds Main.handleConn9 of wild1 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  (GHC.Base.++ @ GHC.Types.Char ds Main.handleConn8)
                                  GHC.Types.True
                                  eta of ds1 { (#,#) ipv ipv1 ->
                           case Foreign.C.String.withCStringLen1
                                  @ GHC.Types.Int
                                  Main.handleConn7
                                  (\ (ds2 :: (GHC.Ptr.Ptr Foreign.C.Types.CChar, GHC.Types.Int))
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case ds2 of wild2 { (,) str len ->
                                   Network.Socket.send2
                                     s
                                     str
                                       `cast`
                                     (GHC.Ptr.Ptr <Foreign.C.Types.CChar, GHC.Word.Word8>)_R
                                     len
                                     eta1 })
                                    `cast`
                                  (<(GHC.Ptr.Ptr Foreign.C.Types.CChar, GHC.Types.Int)>_R
                                   ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           Network.Socket.close1 s ipv2 } }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleConn6
                                  GHC.Types.True
                                  eta of ds1 { (#,#) ipv ipv1 ->
                           case Foreign.C.String.withCStringLen1
                                  @ GHC.Types.Int
                                  Main.handleConn5
                                  (\ (ds2 :: (GHC.Ptr.Ptr Foreign.C.Types.CChar, GHC.Types.Int))
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case ds2 of wild2 { (,) str len ->
                                   Network.Socket.send2
                                     s
                                     str
                                       `cast`
                                     (GHC.Ptr.Ptr <Foreign.C.Types.CChar, GHC.Word.Word8>)_R
                                     len
                                     eta1 })
                                    `cast`
                                  (<(GHC.Ptr.Ptr Foreign.C.Types.CChar, GHC.Types.Int)>_R
                                   ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           Network.Socket.close1 s ipv2 } } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.handleConn4
                             GHC.Types.True
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Foreign.C.String.withCStringLen1
                             @ GHC.Types.Int
                             Main.handleConn3
                             (\ (ds2 :: (GHC.Ptr.Ptr Foreign.C.Types.CChar, GHC.Types.Int))
                                (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case ds2 of wild1 { (,) str len ->
                              Network.Socket.send2
                                s
                                str `cast` (GHC.Ptr.Ptr <Foreign.C.Types.CChar, GHC.Word.Word8>)_R
                                len
                                eta1 })
                               `cast`
                             (<(GHC.Ptr.Ptr Foreign.C.Types.CChar, GHC.Types.Int)>_R
                              ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      Network.Socket.close1 s ipv2 } } }) -}
782b74002cff21d5555f93f694fb70e0
  handleConn3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "qwertyuiop"#) -}
e80c7a7a083c966ee9615d89c29e0811
  handleConn4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HELO sent"#) -}
93420e106f39f0af7219e97e7f9e367b
  handleConn5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sevice killed"#) -}
500d53b1bbfaee225b3bc98f104aaf15
  handleConn6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "KILL sent"#) -}
98a2cfdb83d473f4a7737008cbe0fb54
  handleConn7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "message recieved"#) -}
01cae9fe691d9cd0119b8ecd938c1547
  handleConn8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " sent"#) -}
0f9584d44be5aed73f870551a7dece67
  handleConn9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "KILL_SERVICE\n"#) -}
043dbba36199528b9b5f81f3eef621ce
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d2ddf3694b9c3480adff1306e8a460a5
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.createConnection1
                        (case Text.Read.readEither6
                                @ GHC.Types.Int
                                (Text.ParserCombinators.ReadP.run
                                   @ GHC.Types.Int
                                   Main.main2
                                   ipv3) of wild {
                           []
                           -> GHC.Err.error
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.Types.Int
                                GHC.Err.errorWithoutStackTrace_wild1
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                Text.Read.readEither4
                           : x ds
                           -> case ds of wild1 {
                                [] -> x
                                : ipv4 ipv5
                                -> GHC.Err.error
                                     @ 'GHC.Types.PtrRepLifted
                                     @ GHC.Types.Int
                                     GHC.Err.errorWithoutStackTrace_wild1
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     Text.Read.readEither2 } })
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 Main.connLoop1 ipv5 ipv4 } } }) -}
c356bd6676f7c263267afb1e9ca53b75
  main2 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
884bda9414e3ee80aec70047983577cb
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Server Port:"#) -}
63c1077b66172fd5d9493a7d9bc0af73
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4524261f385a5ca769f93bdc796e355f
  parseMessage ::
    Network.Socket.Types.Socket -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U(U),A,A,A,1*U(U))><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleConn2
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

